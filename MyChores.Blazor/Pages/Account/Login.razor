@page "/login"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using MyChores.Application.Features.Auth.Queries
@using MyChores.Blazor.Services

@page "/account/login"



@inject NavigationManager navigation
@inject AuthenticationStateProvider authStateProvider
@inject AuthService authService

@inject ILocalStorageService LocalStorage

<div class="container ">
    <div class="row justify-content-center">
        <div class="col-6">
            <h3>Login</h3>
            <EditForm Model="user" OnSubmit="HandleLogin">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="user.Email" />
                <label for="password">Password</label>
                <InputText id="password" @bind-Value="user.Password" type="password" />
                <button type="submit" class="btn btn-primary">Do it!</button>
            </EditForm>
        </div>
    </div>
</div>


@code
{
    private LoginUserQuery? user;

    protected override async Task OnInitializedAsync()
    {
        user = new LoginUserQuery();
    }

    public async Task HandleLogin()
    {

        var response = await authService.LoginUserAsync(user);

        if (response == null)
            throw new Exception("login failed");

        await LocalStorage.SetItemAsync("token", response.Token);

        var userState = await authStateProvider.GetAuthenticationStateAsync();

        if (userState.User.Identity.IsAuthenticated)
        {
            navigation.NavigateTo("/Chores");
        }

    }
}