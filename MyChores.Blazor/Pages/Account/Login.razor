@page "/login"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using MyChores.Application.Features.Auth.Queries
@using MyChores.Blazor.Services

@page "/account/login"



@inject NavigationManager navigation
@inject AuthenticationStateProvider authStateProvider
@inject AuthService authService

@inject ILocalStorageService LocalStorage

<div class="container ">
    <div class="row justify-content-center">
        <div class="col-4 align-self-center mt-5">
            <FluentCard >
                <div class="text-center ">
                    <FluentIcon Value="@(new Icons.Regular.Size48.Person())" Color="Color.Accent" />
                </div>
                <hr/>
                <EditForm Model="user" OnSubmit="HandleLogin">
                    <FluentLabel Class="mt-3">Email</FluentLabel>
                    <FluentTextField id="email" Class="w-100 mt-2" @bind-Value="user.Email" />
                    <FluentLabel Class="mt-3">Password</FluentLabel>
                    <FluentTextField id="password" Class="w-100  mt-2" @bind-Value="user.Password" type="password" />
                    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Class="w-100 mt-4">Login</FluentButton>
                </EditForm>
            </FluentCard>
        </div>
    </div>
</div>


@code
{
    private LoginUserQuery? user;

    protected override async Task OnInitializedAsync()
    {
        user = new LoginUserQuery();
    }

    public async Task HandleLogin()
    {

        var response = await authService.LoginUserAsync(user);

        if (response == null)
            throw new Exception("login failed");

        await LocalStorage.SetItemAsync("token", response.Token);

        var userState = await authStateProvider.GetAuthenticationStateAsync();

        if (userState.User.Identity.IsAuthenticated)
        {
            navigation.NavigateTo("/Chores");
        }

    }
}