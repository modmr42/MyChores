@page "/chores"

<style>
    .container {
        display: flex;
        height: 100vh; /* Set height to full viewport height */
        width: 40vw;
        flex-direction: column;
        overflow: hidden; /* Added to prevent content overflow */
    }

    .scrollable {
        overflow-y: auto; /* Enable vertical scrolling */
        flex-grow: 1;
        width: 100%;
        margin: 0; /* Set margin to 0 to close the gap */
    }

    .fixed {
        position: fixed;
        bottom: 0;
        right: 0;
        top: 0;
        width: 30vw;
        background-color: lightgray;
        overflow-y: auto; /* Add this line to enable scrolling within the fixed section */
    }
</style>

<div class="container">
    <div class="scrollable">
        <FluentLabel Typo="Typography.H1"> Chores </FluentLabel>
        <br />
        <div style="background-color:red;width:100%;">
            h
        </div>
        @foreach (var item in Enumerable.Range(1, 10))
        {
            <FluentCard Width="100%" Height="auto">
                <p>Selected date @(SelectedValue?.ToString("yyyy-MM-dd"))</p>

                <FluentButton Appearance="Appearance.Accent">Hello</FluentButton>
                <p>No Width or Height has been specified.</p>
            </FluentCard>
            <br />
        }

    </div>
    <div class="fixed">
        <FluentCalendar DisabledDateFunc="@DisabledDate" @bind-Value="@SelectedValue" 
        Style="width:100%!important; padding:10%;">
            <DaysTemplate>
                @if (!context.IsInactive &&
                (context.Date.Day == 5 || context.Date.Day == 15))
                {
                    <div style="color: red; font-weight: bold;">
                        @context.DayNumber
                    </div>
                }
                else
                {
                    @context.DayNumber
                }
            </DaysTemplate>
        </FluentCalendar>
    </div>
</div>


@code
{
    private DateTime? SelectedValue = null;

    private bool DisabledDate(DateTime date) 
    {
        return (date.Day == 3 ||
                date.Day == 8 ||
                date.Day == 20);
    }
}
