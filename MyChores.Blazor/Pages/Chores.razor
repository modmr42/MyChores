@page "/chores"
@using MyChores.Application.Features.Chores.Dtos
@inject IDialogService DialogService


<div class="container">

    <div class="row">
        <div class="col-8">
            <FluentLabel Typo="Typography.H1"> My Chores </FluentLabel>
            <FluentLabel Typo="Typography.H3"> @SelectedValue?.ToString("D") </FluentLabel>
            <br />
            <hr />
            <div class="row justify-content-end mb-3">
                <div class="col-1">
                    <FluentButton IconStart="@(new Icons.Regular.Size16.Add())" OnClick="@ShowMessageBoxAsync"></FluentButton>
                </div>
            </div>
            <br />

            @foreach (var item in Enumerable.Range(1,randomNumber))
            {
                <div class="row mb-5">
@*                     <div class="col-1 align-self-center">
                        <FluentCheckbox Appearance="Appearance.Outline"></FluentCheckbox>
                    </div> *@
                    <div class="col-11">
                        <div class="rounded-top" style="background-color:var(--accent-fill-rest)">
                            <FluentLabel Class="p-2 text-white"  Typo="Typography.H6">
                                <FluentIcon Value="@(new Icons.Regular.Size20.Clock())" Color="Color.Lightweight" />
                                15:00
                            </FluentLabel>
                        </div>
                        <FluentCard>
                            <div class="row">
                                    <div class="col-1 align-self-center">
                                        <FluentCheckbox Appearance="Appearance.Outline"></FluentCheckbox>
                                    </div>
                                    <div class="col-11">
                                            <FluentLabel Typo="Typography.Header"> @chore.Name </FluentLabel>
                                            <FluentLabel Typo="Typography.Subject"> @chore.Description </FluentLabel>
                                    </div>
                            </div>
                        </FluentCard>
                    </div>

                        <div class="col-1 align-self-center">
                        <FluentButton>
                            <FluentIcon Value="@(new Icons.Regular.Size16.Delete())" Color="Color.Error" />
                        </FluentButton>
                    </div>
                </div>
                <br />


            }
            </div>
            <FluentDialogProvider />
            <br />


        <div class="col-4">
            <FluentCalendar DisabledDateFunc="@DisabledDate" @bind-Value="@SelectedValue"
                            Style="width:100%!important; padding:10%; font-size:larger">
                <DaysTemplate>
                    @if (!context.IsInactive &&
                    (context.Date.Day == 5 || context.Date.Day == 15))
                    {
                        <div style="color: red; font-weight: bold;">
                            @context.DayNumber
                        </div>
                    }
                    else
                    {
                        @context.DayNumber
                    }
                </DaysTemplate>
            </FluentCalendar>
        </div>
    </div>
</div>



@code
{
    private ChoreDto chore = new ChoreDto
        {
            Name = "Clean room",
            Description = "Clean carpets, rugs, and hard floors to remove dust, dirt, and other particles.",
            ChoreOwner = "Me",
            ChoreTaker = "Me",
            Completed = false,
            CreatedDate = DateTime.Now.AddDays(-3).ToString("t"),
    };
    private int randomNumber
    {
    get
    {
        return new Random().Next(5);
    }
    }
    private DateTime? SelectedValue = DateTime.Now;

    private bool DisabledDate(DateTime date)
    {
    return (date.Day == 3 ||
            date.Day == 8 ||
            date.Day == 20);
    }

    private async Task ShowMessageBoxAsync()
    {
    var dialog = await DialogService.ShowMessageBoxAsync(new DialogParameters<MessageBoxContent>()
        {
            Content = new()
            {
                Title = "My title",
                MarkupMessage = new MarkupString("My <strong>customized</strong> message"),
                Icon = new Icons.Regular.Size24.Games(),
                IconColor = Color.Success,
            },
            PrimaryAction = "Plus",
            SecondaryAction = "Minus",
            Width = "300px",
        });
    var result = await dialog.Result;
    }
}