@page "/chores"
@using MyChores.Application.Features.Chores.Dtos
@inject IDialogService DialogService

<style>
    .container {
        display: flex;
        height: 100vh; /* Set height to full viewport height */
        width: 40vw;
        flex-direction: column;
        overflow: hidden; /* Added to prevent content overflow */
    }

    .scrollable {
        overflow-y: auto; /* Enable vertical scrolling */
        flex-grow: 1;
        width: 100%;
        margin: 0; /* Set margin to 0 to close the gap */
    }

    .fixed {
        position: fixed;
        bottom: 0;
        right: 0;
        top: 0;
        width: 30vw;
        background-color: lightgray;
        overflow-y: auto; /* Add this line to enable scrolling within the fixed section */
    }
</style>

<div class="container">
    <div class="scrollable">
        <FluentLabel Typo="Typography.H1"> My Chores </FluentLabel>
        <FluentLabel Typo="Typography.H3"> @SelectedValue?.ToString("D") </FluentLabel>

        <br />
        <hr />
        <FluentGrid Spacing="1"  Justify="JustifyContent.FlexEnd">
                <FluentButton IconStart="@(new Icons.Regular.Size16.Add())" Style="margin-right:10px" OnClick="@ShowMessageBoxAsync">
                    Add
                </FluentButton>
        </FluentGrid>
            <FluentDialogProvider />
        <br />

        @foreach (var item in Enumerable.Range(1, 3))
        {
        <FluentStack Orientation="Orientation.Horizontal"
                        HorizontalAlignment="HorizontalAlignment.Start"
                        VerticalAlignment="VerticalAlignment.Top"
                        VerticalGap="20">
            <FluentStack Orientation="Orientation.Vertical"
                            HorizontalAlignment="HorizontalAlignment.Start"
                            VerticalAlignment="VerticalAlignment.Top"
                            Width="5%" >
                <FluentCheckbox Appearance="Appearance.Outline"></FluentCheckbox>

            </FluentStack>

            <FluentStack Orientation="Orientation.Vertical"
                            HorizontalAlignment="HorizontalAlignment.Start"
                            VerticalAlignment="VerticalAlignment.Top"
                            >

                <FluentCard Width="100%" Height="auto">
                    <FluentLabel Typo="Typography.Header"> @chore.Name </FluentLabel>
                        <FluentLabel Typo="Typography.Subject"> @chore.Description </FluentLabel>
                    </FluentCard>
                <br />
            </FluentStack>
                    <FluentButton>
                        <FluentIcon Value="@(new Icons.Regular.Size16.Delete())" Color="Color.Error" />
                    </FluentButton>
        </FluentStack>
        }


    </div>
    <div class="fixed">
        <FluentCalendar DisabledDateFunc="@DisabledDate" @bind-Value="@SelectedValue"
        Style="width:100%!important; padding:10%; font-size:larger">
            <DaysTemplate>
                @if (!context.IsInactive &&
                (context.Date.Day == 5 || context.Date.Day == 15))
                {
                    <div style="color: red; font-weight: bold;">
                        @context.DayNumber
                    </div>
                }
                else
                {
                    @context.DayNumber
                }
            </DaysTemplate>
        </FluentCalendar>
    </div>
</div>


@code
{
    private ChoreDto chore = new ChoreDto
        {
            Name = "Clean room",
            Description = "Clean carpets, rugs, and hard floors to remove dust, dirt, and other particles.",
            ChoreOwner = "Me",
            ChoreTaker = "Me",
            Completed = false,
        };

    private DateTime? SelectedValue = null;

    private bool DisabledDate(DateTime date) 
    {
        return (date.Day == 3 ||
                date.Day == 8 ||
                date.Day == 20);
    }

    private async Task ShowMessageBoxAsync()
    {
        var dialog = await DialogService.ShowMessageBoxAsync(new DialogParameters<MessageBoxContent>()
            {
                Content = new()
                {
                    Title = "My title",
                    MarkupMessage = new MarkupString("My <strong>customized</strong> message"),
                    Icon = new Icons.Regular.Size24.Games(),
                    IconColor = Color.Success,
                },
                PrimaryAction = "Plus",
                SecondaryAction = "Minus",
                Width = "300px",
            });
        var result = await dialog.Result;
    }
}
