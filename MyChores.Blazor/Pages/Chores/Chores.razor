@page "/chores"
@attribute [Authorize]


@using Microsoft.AspNetCore.Authorization
@using MyChores.Application.Features.Chores.Commands
@using MyChores.Application.Features.Chores.Dtos
@using System.Diagnostics
@using MyChores.Blazor.Services
@using MyChores.Domain.Enums


@inject NavigationManager NavigationManager
@inject ChoreService ChoreService




<div class="container">

    <div class="row">
        <div class="col-8">
            <FluentLabel Typo="Typography.H1"> My Chores </FluentLabel>
            <FluentLabel Typo="Typography.H3"> @CurrentSelectedDate?.ToString("D") </FluentLabel>
                <br />
                <hr />
                <div class="row justify-content-end mb-3">
                    <div class="col-1">
                        <FluentButton IconStart="@(new Icons.Regular.Size16.Add())" OnClick="@ShowNewChore"></FluentButton>
                    </div>
                </div>
                <br />
                @if (showNewChore)
            {
                <EditForm Model="newChore" OnSubmit="CreateChore">
                    <div class="row mb-5">
                        <div class="col-11">
                            <div class="rounded-top" style="background-color:var(--accent-fill-rest); height:10px;">
                            </div>
                            <FluentCard>
                                <div class="row">

                                    <div class="col-2">
                                        <FluentTimePicker @bind-Value="newChoreTime" Label="Time:" />
                                    </div>
                                    <div class="col-9">
                                        <div class="row">
                                            <div class="col-6">
                                                <FluentTextField Class="w-100" @bind-Value=newChore.Name Label="Name"></FluentTextField>
                                            </div>
                                            <div class="col-6">
                                            @*<FluentSelect Class="w-100" Items="recourseOptions"
                                                              Label="Select a recourse"
                                                              OptionValue="@(r => ((int)r.Value).ToString())"
                                                              OptionText="@(r => r.Value.ToString())"
                                                              @bind-Value="newChore.Recourse" /> *@
                                            </div>
                                        </div>
                                        <FluentTextArea Class="w-100" @bind-Value=newChore.Description Label="Description"></FluentTextArea>
                                    </div>
                                    <div class="col-1 align-self-center">
                                        <FluentCheckbox Appearance="Appearance.Outline"></FluentCheckbox>
                                    </div>
                                </div>
                            </FluentCard>
                        </div>

                        <div class="col-1 align-self-center">
                            <FluentButton Class="mb-3" OnClick="(()=> showNewChore = false)">
                                <FluentIcon Value="@(new Icons.Regular.Size16.Delete())" Color="Color.Error" />
                            </FluentButton>
                            <FluentButton Type="ButtonType.Submit">
                                <FluentIcon Value="@(new Icons.Regular.Size16.Checkmark())" Color="Color.Accent" />
                            </FluentButton>
                        </div>
                    </div>
                </EditForm>
            }

            @if (chores == null)
            {
                <div>Loading..</div>
            }
            else
            {
                @foreach (var chore in choresForSelectedDate!)
                {
                    <div class="row mb-5">
                        <div class="col-11">
                            <a href="@($"chores/{chore.Id}")" style="text-decoration:none">
                                <div class="rounded-top" style="background-color:var(--accent-fill-rest); height:10px;">
                                </div>
                                <FluentCard>
                                    <div class="row">

                                        <div class="col-1 align-self-center text-center">
                                            <FluentIcon Value="@(new Icons.Regular.Size20.Clock())" Color="Color.Accent" />

                                            <FluentLabel Typo="Typography.H6">
                                                @chore.DateTime.ToShortTimeString()
                                            </FluentLabel>
                                        </div>
                                        <div class="col-10">
                                            <FluentLabel Typo="Typography.Header"> @chore.Name </FluentLabel>
                                                <FluentLabel Typo="Typography.Subject"> @chore.Description </FluentLabel>
                                            </div>
                                            <div class="col-1 align-self-center">
                                                <FluentCheckbox Appearance="Appearance.Outline"></FluentCheckbox>
                                            </div>
                                        </div>
                                    </FluentCard>
                                </a>
                            </div>

                            <div class="col-1 align-self-center">
                                <FluentButton OnClick="() => DeleteChore(chore.Id)">
                                    <FluentIcon Value="@(new Icons.Regular.Size16.Delete())" Color="Color.Error" />
                                </FluentButton>
                            </div>
                        </div>
                }

            }

            <br />
        </div>


        <div class="col-4">
            <FluentCalendar DisabledDateFunc="@DisabledDate" ValueChanged="HandleCalendarValue"
                            Style="width:100%!important; padding:10%; font-size:larger">
                <DaysTemplate>
                    @if (!context.IsInactive &&
                    (context.Date.Day == 5 || context.Date.Day == 15))
                    {
                        <div style="color: red; font-weight: bold;">
                            @context.DayNumber
                        </div>
                    }
                    else
                    {
                        @context.DayNumber
                    }
                </DaysTemplate>
            </FluentCalendar>
        </div>
    </div>
</div>


@code
{
    private DateTime? CurrentSelectedDate = DateTime.Now;
    private List<ChoreDto>? chores;
    private List<ChoreDto>? choresForSelectedDate;

    private CreateChoreCommand newChore = new CreateChoreCommand();
    private bool showNewChore;
    private DateTime? newChoreTime;

    // private List<Option<Recourse?>> recourseOptions = Enum.GetValues(typeof(Recourse)).Cast<Recourse?>().Select(x => new Option<Recourse?> { Value = x.Value }).ToList();

    protected override async Task OnInitializedAsync()
    {
        await RefreshAndSortChores();
    }

    private void HandleCalendarValue(DateTime? selectedValue)
    {
        CurrentSelectedDate = selectedValue;

        choresForSelectedDate = chores.Where(x => x.DateTime.Day.Equals(CurrentSelectedDate.ToDateTime().Day)).OrderBy(x => x.DateTime).ToList();
    }
    private void ShowNewChore()
    {
        showNewChore = true;
    }

    private async Task CreateChore()
    {
        newChore.ChoreOwner = "Me";
        newChore.ChoreTaker = "Me";
        newChore.DateTime = CombineDateTime(CurrentSelectedDate.Value, newChoreTime.Value);
        await ChoreService.CreateAsync(newChore);

        await RefreshAndSortChores();

        newChore = new CreateChoreCommand();

        showNewChore = false;

    }

    private async Task DeleteChore(Guid id)
    {
        await ChoreService.DeleteAsync(id.ToString());
        await RefreshAndSortChores();
    }

    private async Task RefreshAndSortChores()
    {
        chores = await ChoreService.GetAllAsync();
        choresForSelectedDate = chores.Where(x => x.DateTime.Day.Equals(CurrentSelectedDate.ToDateTime().Day)).OrderBy(x => x.DateTime).ToList();
    }

    private bool DisabledDate(DateTime date)
    {
        return (date.Day == 3 ||
                date.Day == 8 ||
                date.Day == 20);
    }

    static DateTime CombineDateTime(DateTime datePart, DateTime timePart)
    {
        // Combine the date part with the time part
        return new DateTime(datePart.Year, datePart.Month, datePart.Day,
                            timePart.Hour, timePart.Minute, timePart.Second);
    }


}